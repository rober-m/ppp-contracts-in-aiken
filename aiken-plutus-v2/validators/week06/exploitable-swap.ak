use aiken/hash.{Blake2b_224, Hash}
use aiken/list
use aiken/transaction.{ScriptContext, Spend, Transaction}
use aiken/transaction/credential.{VerificationKey, from_verification_key}
use aiken/transaction/value

type VerificationKeyHash =
  Hash<Blake2b_224, VerificationKey>

type DatumSwap {
  beneficiary: VerificationKeyHash,
  price: Int,
}

validator {
  fn exploitable_swap(datum: DatumSwap, _r: Data, ctx: ScriptContext) -> Bool {
    when ctx.purpose is {
      Spend(_) -> {
        // Get Tx outputs
        let Transaction { outputs, .. } = ctx.transaction
        // Get only beneficiary's outputs
        let user_outputs =
          list.filter(
            outputs,
            fn(o) { o.address == from_verification_key(datum.beneficiary) },
          )
        // Caluculate total value sent to beneficiary
        let value_paid_to_benef =
          list.foldl(
            user_outputs,
            value.zero(),
            fn(n, acc) { value.merge(n.value, acc) },
          )
        // Validator check
        (value.lovelace_of(value_paid_to_benef) >= datum.price)?
      }
      _ -> False
    }
  }
}
